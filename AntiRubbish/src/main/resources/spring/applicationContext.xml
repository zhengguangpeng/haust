<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/tx
     	   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<context:component-scan base-package="com.transn"></context:component-scan>
	<context:annotation-config />
	<!--proxy-target-class="true"强制使用cglib代理 如果为false则spring会自动选择 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

  	<camel:camelContext id="camel">
    	<camel:template id="camelTemplate"/>
  	</camel:camelContext>
  
	<!-- 配置数据源 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		  <property name="locations">
            <list>
                <value>classpath*:conf/jdbc.properties</value>
                <value>classpath*:conf/hibernate.properties</value>
            </list>
        </property>
	</bean>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 连接池启动时的初始值 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 连接池的最大值 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<property name="idleConnectionTestPeriod" value="360" /> 
  		<property name="preferredTestQuery" value="select 1" />   
		<property name="acquireIncrement" value="5" />   
		<property name="acquireRetryAttempts" value="50" />   
        <property name="acquireRetryDelay" value="1000" />   
        <property name="breakAfterAcquireFailure" value="true" />   
   		<property name="autoCommitOnClose" value="false" />   
        <property name="testConnectionOnCheckout" value="true" />      
        <property name="maxStatements" value="100" />
        <property name="maxStatementsPerConnection" value="5" />
    </bean>
	<!-- 实例化 DBAgent bean-->
	<bean id="dbAgent" class="com.transn.dao.base.jpa.DBAgent">
	 <!-- 配置数据源 -->
	 <property name="dataSource" ref="dataSource"/>
	 <!-- 配置是否显示执行的sql语句 -->
	 <property name="showSql" value="false"/>
	</bean>
	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceXmlLocation" value="classpath:persistence.xml" />
		<property name="persistenceUnitName" value="Unit" />
		<property name="jpaProperties">
			<props>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.jdbc.fetch_size">18</prop>
				<prop key="hibernate.jdbc.batch_size">10</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>

	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<!-- 采用annotation的方式配置事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
		
	
</beans>
